# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnivelma_msgs/SetInertiaRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SetInertiaRequest(genpy.Message):
  _md5sum = "95e035d263d97e8c32424221cde3ffa8"
  _type = "omnivelma_msgs/SetInertiaRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Inertia base
geometry_msgs/Inertia front
geometry_msgs/Inertia wheel

================================================================================
MSG: geometry_msgs/Inertia
# Mass [kg]
float64 m

# Center of mass [m]
geometry_msgs/Vector3 com

# Inertia Tensor [kg-m^2]
#     | ixx ixy ixz |
# I = | ixy iyy iyz |
#     | ixz iyz izz |
float64 ixx
float64 ixy
float64 ixz
float64 iyy
float64 iyz
float64 izz

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['base','front','wheel']
  _slot_types = ['geometry_msgs/Inertia','geometry_msgs/Inertia','geometry_msgs/Inertia']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base,front,wheel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetInertiaRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.base is None:
        self.base = geometry_msgs.msg.Inertia()
      if self.front is None:
        self.front = geometry_msgs.msg.Inertia()
      if self.wheel is None:
        self.wheel = geometry_msgs.msg.Inertia()
    else:
      self.base = geometry_msgs.msg.Inertia()
      self.front = geometry_msgs.msg.Inertia()
      self.wheel = geometry_msgs.msg.Inertia()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_30d().pack(_x.base.m, _x.base.com.x, _x.base.com.y, _x.base.com.z, _x.base.ixx, _x.base.ixy, _x.base.ixz, _x.base.iyy, _x.base.iyz, _x.base.izz, _x.front.m, _x.front.com.x, _x.front.com.y, _x.front.com.z, _x.front.ixx, _x.front.ixy, _x.front.ixz, _x.front.iyy, _x.front.iyz, _x.front.izz, _x.wheel.m, _x.wheel.com.x, _x.wheel.com.y, _x.wheel.com.z, _x.wheel.ixx, _x.wheel.ixy, _x.wheel.ixz, _x.wheel.iyy, _x.wheel.iyz, _x.wheel.izz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.base is None:
        self.base = geometry_msgs.msg.Inertia()
      if self.front is None:
        self.front = geometry_msgs.msg.Inertia()
      if self.wheel is None:
        self.wheel = geometry_msgs.msg.Inertia()
      end = 0
      _x = self
      start = end
      end += 240
      (_x.base.m, _x.base.com.x, _x.base.com.y, _x.base.com.z, _x.base.ixx, _x.base.ixy, _x.base.ixz, _x.base.iyy, _x.base.iyz, _x.base.izz, _x.front.m, _x.front.com.x, _x.front.com.y, _x.front.com.z, _x.front.ixx, _x.front.ixy, _x.front.ixz, _x.front.iyy, _x.front.iyz, _x.front.izz, _x.wheel.m, _x.wheel.com.x, _x.wheel.com.y, _x.wheel.com.z, _x.wheel.ixx, _x.wheel.ixy, _x.wheel.ixz, _x.wheel.iyy, _x.wheel.iyz, _x.wheel.izz,) = _get_struct_30d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_30d().pack(_x.base.m, _x.base.com.x, _x.base.com.y, _x.base.com.z, _x.base.ixx, _x.base.ixy, _x.base.ixz, _x.base.iyy, _x.base.iyz, _x.base.izz, _x.front.m, _x.front.com.x, _x.front.com.y, _x.front.com.z, _x.front.ixx, _x.front.ixy, _x.front.ixz, _x.front.iyy, _x.front.iyz, _x.front.izz, _x.wheel.m, _x.wheel.com.x, _x.wheel.com.y, _x.wheel.com.z, _x.wheel.ixx, _x.wheel.ixy, _x.wheel.ixz, _x.wheel.iyy, _x.wheel.iyz, _x.wheel.izz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.base is None:
        self.base = geometry_msgs.msg.Inertia()
      if self.front is None:
        self.front = geometry_msgs.msg.Inertia()
      if self.wheel is None:
        self.wheel = geometry_msgs.msg.Inertia()
      end = 0
      _x = self
      start = end
      end += 240
      (_x.base.m, _x.base.com.x, _x.base.com.y, _x.base.com.z, _x.base.ixx, _x.base.ixy, _x.base.ixz, _x.base.iyy, _x.base.iyz, _x.base.izz, _x.front.m, _x.front.com.x, _x.front.com.y, _x.front.com.z, _x.front.ixx, _x.front.ixy, _x.front.ixz, _x.front.iyy, _x.front.iyz, _x.front.izz, _x.wheel.m, _x.wheel.com.x, _x.wheel.com.y, _x.wheel.com.z, _x.wheel.ixx, _x.wheel.ixy, _x.wheel.ixz, _x.wheel.iyy, _x.wheel.iyz, _x.wheel.izz,) = _get_struct_30d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_30d = None
def _get_struct_30d():
    global _struct_30d
    if _struct_30d is None:
        _struct_30d = struct.Struct("<30d")
    return _struct_30d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnivelma_msgs/SetInertiaResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetInertiaResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "omnivelma_msgs/SetInertiaResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetInertiaResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SetInertia(object):
  _type          = 'omnivelma_msgs/SetInertia'
  _md5sum = '95e035d263d97e8c32424221cde3ffa8'
  _request_class  = SetInertiaRequest
  _response_class = SetInertiaResponse
