// Generated by gencpp from file omnivelma_msgs/Vels.msg
// DO NOT EDIT!


#ifndef OMNIVELMA_MSGS_MESSAGE_VELS_H
#define OMNIVELMA_MSGS_MESSAGE_VELS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace omnivelma_msgs
{
template <class ContainerAllocator>
struct Vels_
{
  typedef Vels_<ContainerAllocator> Type;

  Vels_()
    : fr(0.0)
    , fl(0.0)
    , rl(0.0)
    , rr(0.0)  {
    }
  Vels_(const ContainerAllocator& _alloc)
    : fr(0.0)
    , fl(0.0)
    , rl(0.0)
    , rr(0.0)  {
  (void)_alloc;
    }



   typedef double _fr_type;
  _fr_type fr;

   typedef double _fl_type;
  _fl_type fl;

   typedef double _rl_type;
  _rl_type rl;

   typedef double _rr_type;
  _rr_type rr;




  typedef boost::shared_ptr< ::omnivelma_msgs::Vels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::omnivelma_msgs::Vels_<ContainerAllocator> const> ConstPtr;

}; // struct Vels_

typedef ::omnivelma_msgs::Vels_<std::allocator<void> > Vels;

typedef boost::shared_ptr< ::omnivelma_msgs::Vels > VelsPtr;
typedef boost::shared_ptr< ::omnivelma_msgs::Vels const> VelsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::omnivelma_msgs::Vels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::omnivelma_msgs::Vels_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace omnivelma_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'omnivelma_msgs': ['/home/pwalas1/catkin_pw/src/omnivelma/src/omnivelma_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::omnivelma_msgs::Vels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omnivelma_msgs::Vels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::omnivelma_msgs::Vels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::omnivelma_msgs::Vels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omnivelma_msgs::Vels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omnivelma_msgs::Vels_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::omnivelma_msgs::Vels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9241866e5fa52f8ff5c46fd7ab0776e";
  }

  static const char* value(const ::omnivelma_msgs::Vels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9241866e5fa52f8ULL;
  static const uint64_t static_value2 = 0xff5c46fd7ab0776eULL;
};

template<class ContainerAllocator>
struct DataType< ::omnivelma_msgs::Vels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "omnivelma_msgs/Vels";
  }

  static const char* value(const ::omnivelma_msgs::Vels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::omnivelma_msgs::Vels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 fr\n\
float64 fl\n\
float64 rl\n\
float64 rr\n\
";
  }

  static const char* value(const ::omnivelma_msgs::Vels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::omnivelma_msgs::Vels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fr);
      stream.next(m.fl);
      stream.next(m.rl);
      stream.next(m.rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::omnivelma_msgs::Vels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::omnivelma_msgs::Vels_<ContainerAllocator>& v)
  {
    s << indent << "fr: ";
    Printer<double>::stream(s, indent + "  ", v.fr);
    s << indent << "fl: ";
    Printer<double>::stream(s, indent + "  ", v.fl);
    s << indent << "rl: ";
    Printer<double>::stream(s, indent + "  ", v.rl);
    s << indent << "rr: ";
    Printer<double>::stream(s, indent + "  ", v.rr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OMNIVELMA_MSGS_MESSAGE_VELS_H
